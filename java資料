[Java SE 6 技術手冊](https://github.com/JustinSDK/JavaSE6Tutorial)  
林信良先生的書，寫得很清楚，值得一看，在Google play上也可以買到電子書。  
  
[JAVA中 @Override 的作用](https://hk.knowledge.yahoo.com/question/question?qid=7013061700120)

如果想重寫父類的方法，比如toString()方法的話，在方法前面加上@Override 系統可以幫你檢查方法的正確性。   

```java
@Override
public String toString(){...}
```

  
一旦寫錯 寫成這樣
  
```
@Override
public String tostring(){...}//typo
```
編譯器可以檢測出這種寫法是錯誤的 這樣能保證你的確重寫的方法正確  
而如果不加@Override  
public String tostring(){...}這樣編譯器是不會報錯的 它只會認為這是你自己新加的一個方法而已

------------------------------------------------------------

@Override的用法：  
  
Override：  
java.lang.Override是一個marker annotation類型，它被用作標注方法。它說明了被標注的方法重載了父類的方法，起到了斷言的作用。如果我們使用了這種annotation在一個沒有覆蓋父類方法的方法時，java編譯器將以一個編譯錯誤來警示。
這個annotaton常常在我們試圖覆蓋父類方法而確又寫錯了方法名時發揮威力。  
  
使用方法極其簡單：在使用此annotation時只要在**被修飾的方法前面加上@Override**。  
下面的代碼是一個使用**@Override修飾一個企圖重載父類的toString方法**，而又存在拼寫錯誤的sample：  
清單1：  
  
`@Override public String toSting() { return "[" + super.toString() + "]";}`
// 注意方法名拼寫錯了

@Override是偽代碼,表示重寫(當然不寫也可以),不過還是建議你寫上,有如下好處: 
1.可以當註釋用,方便閱讀
2.編譯器可以給你驗證@Override下面的方法名是否是你父類中所有的,如果沒有則報錯
比如你如果沒寫@Override而你下面的方法名又寫錯了,這時你的編譯器是可以通過的(它以為這個方法是你的
子類中自己增加的方法) 謝了，很清楚 
